name: Security

on:
  workflow_call:
    inputs:
      working-directory:
        description: The working directory, default to ".".
        required: false
        default: "."
        type: string
      node-version:
        description: The nodeJS version, default to "latest".
        required: false
        default: "latest"
        type: string
      scan-mode:
        description: The selected mode, available are "code", "dependencies" or "all", default to "all".
        required: false
        default: "all"
        type: string
      snyk-project:
        description: The Snyk project on which reports will be uploaded.
        required: true
        type: string
      target:
        description: The target identifier, like a git branch, default to "main".
        required: false
        default: "main"
        type: string
      severity-threshold:
        description: The severity threshold, can be "low", "medium", "high" or "critical", default to "critical".
        required: false
        default: "critical"
        type: string
      fail-on:
        description: The "fail" strategy, only for scan-mode "dependencies". Available values are "upgradable", "patchable" or "all", default to "all".
        required: false
        default: "all"
        type: string
    secrets:
      github-token:
        description: The Github token with "repository viewer" access.
        required: true
      snyk-organization:
        description: The Snyk organization on which project is managed.
        required: true
      snyk-token:
        description: The Snyk token. 
        required: true
        
jobs:
  scan-code:
    runs-on: ubuntu-latest
    name: Scan code for vulnerabilities
    if: ${{ contains(fromJSON('["all", "code"]'), inputs.scan-mode) }}
    steps:
      - id: checkout-code
        name: Initialize code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.github-token }}
      - id: setup-node
        name: Initialize NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
      - id: setup-snyk
        name: Initialize Snyk CLI
        run: |
          npm install -g snyk
          snyk auth ${{ secrets.snyk-token }}
          snyk config set disable-analytics=1
          snyk config set org=${{ secrets.snyk-organization }}
      - id: scan-code
        name: Scan code for vulnerabilities
        run: |
          cd ${{ inputs.working-directory }}
          snyk code test \
            -d \
            --json-file-output="${{runner.temp}}/report_scan-code.json" \
            --project-name="${{ inputs.snyk-project }}" \
            --target-name="${{ inputs.target }}" \
            --severity-threshold="${{ inputs.severity-threshold == 'critical' && 'high' || inputs.severity-threshold }}"
          ((ls ${{runner.temp}}/report_scan-code.json >> /dev/null 2>&1 && echo "hasReport=1") || echo "hasReport=0") >> "$GITHUB_OUTPUT"
      - id: upload-report
        name: Upload report on Github Action run
        if: ${{ steps.scan-code.outputs.hasReport == '1' }}
        uses: actions/upload-artifact@v4
        with:
          name: report-security
          path: ${{runner.temp}}/report_scan-code.json
  scan-dependencies:
    runs-on: ubuntu-latest
    name: Scan dependencies for vulnerabilities
    if: ${{ contains(fromJSON('["all", "dependencies"]'), inputs.scan-mode) }}
    steps:
      - id: checkout-code
        name: Initialize code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.github-token }}
      - id: setup-node
        name: Initialize NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
      - id: setup-snyk
        name: Initialize Snyk CLI
        run: |
          npm install -g snyk
          snyk auth ${{ secrets.snyk-token }}
          snyk config set disable-analytics=1
          snyk config set org=${{ secrets.snyk-organization }}
      - id: scan-dependencies
        name: Scan dependencies for vulnerabilities
        run: |
          cd ${{ inputs.working-directory }}
          snyk test \
            -d \
            --json-file-output="${{runner.temp}}/report_scan-dependencies.json" \
            --project-name="${{ inputs.snyk-project }}" \
            --target-name="${{ inputs.target }}" \
            --severity-threshold="${{ inputs.severity-threshold }}" \
            --fail-on="${{ inputs.fail-on }}"
          ((ls ${{runner.temp}}/report_scan-dependencies.json >> /dev/null 2>&1 && echo "hasReport=1") || echo "hasReport=0") >> "$GITHUB_OUTPUT"
      - id: upload-report
        name: Upload report on Github Action run
        if: ${{ steps.scan-dependencies.outputs.hasReport == '1' }}
        uses: actions/upload-artifact@v4
        with:
          name: report-security
          path: ${{runner.temp}}/report_scan-dependencies.json
      - id: summarize-report
        name: Summarize report on Github Action run
        if: ${{ steps.scan-dependencies.outputs.hasReport == '1' }}
        uses: actions/github-script@v7
        with:
          script: |
            const count = {
                critical: 0,
                high: 0,
                medium: 0,
                low: 0
              }

            const output = {
              critical: 'error',
              high: 'error',
              medium: 'warning',
              low: 'notice'
            }

            const report = require("${{runner.temp}}/report_scan-dependencies.json")

            for(const vulnerability of report.vulnerabilities) {
              count[vulnerability.severity] += 1
            }

            core.notice(`{report.dependencyCount} dependencies analyzed. {report.summary}.`)

            Object.keys(count).forEach(
              severity => {
                if(count[severity] > 0) {
                  core[output[severity]](`{count[severity]} dependencies marked as {severity} vulnerable.`)
                }
              })
      - id: synchronize-report-github
        name: Synchronize report on Github repository
        if: ${{ steps.scan-dependencies.outputs.hasReport == '1' }}
        uses: actions/github-script@v7
        with:
          script: |
            const vulnerabilities = {
                critical: [],
                high: [],
                medium: [],
                low: []
              }

            const cweIds = {
                critical: new Set(),
                high: new Set(),
                medium: new Set(),
                low: new Set()
              }

            const report = require("${{runner.temp}}/report_scan-dependencies.json")

            for(const vulnerabilty of report.vulnerabilities) {
              vulnerabilities[vulnerability.severity].push({
                  package: {
                    name: vulnerability.packageName,
                    ecosystem: vulnerability.packageManager
                  }
                })

              for(const cweId of vulnerability.identifiers.CWE) {
                  cweIds[vulnerability.severity].add(cweId)
              }
            }

            Object.keys(vulnerabilities).forEach(
              severity => {
                if(vulnerabilities[severity].length > 0) {
                  github.rest.securityAdvisories.createPrivateVulnerabilityReport({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    summary: report.summary,
                    description: `Powered by snyk.io for organization "{report.org}", project "{report.projectName}".`,
                    severity,
                    vulnerabilities: vulnerabilities[severity],
                    cwe_ids: cweIds[vulnerability.severity]
                  })
                }
              })
