name: Security

on:
  workflow_call:
    inputs:
      working-directory:
        description: The working directory, default to ".".
        required: false
        default: "."
        type: string
      node-version:
        description: The nodeJS version, default to "latest".
        required: false
        default: "latest"
        type: string
      scan-mode:
        description: The selected mode, available are "code", "dependencies" or "all", default to "all".
        required: false
        default: "all"
        type: string
      snyk-project:
        description: The Snyk project on which reports will be uploaded.
        required: true
        type: string
      target:
        description: The target identifier, like a git branch, default to "main".
        required: false
        default: "main"
        type: string
      severity-threshold:
        description: The severity threshold, can be "low", "medium", "high" or "critical", default to "critical".
        required: false
        default: "critical"
        type: string
      fail-on:
        description: The "fail" strategy, only for scan-mode "dependencies". Available values are "upgradable", "patchable" or "all", default to "all".
        required: false
        default: "all"
        type: string
    secrets:
      github-token:
        description: The Github token with "repository viewer" access.
        required: true
      snyk-organization:
        description: The Snyk organization on which project is managed.
        required: true
      snyk-token:
        description: The Snyk token. 
        required: true

permissions:
  contents: read
  security-events: write

jobs:
  scan-code:
    runs-on: ubuntu-latest
    name: Scan code for vulnerabilities
    if: ${{ contains(fromJSON('["all", "code"]'), inputs.scan-mode) }}
    steps:
      - id: checkout-code
        name: Initialize code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.github-token }}
      - id: setup-node
        name: Initialize NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: npm
          cache-dependency-path: "${{ inputs.working-directory }}/package-lock.json"
      - id: setup-dependencies
        name: Initialize dependencies
        run: |
          cd ${{ inputs.working-directory }}
          npm install
      - id: scan-code
        name: Scan code for vulnerabilities
        env:
          SNYK_TOKEN: ${{ secrets.snyk-token }}
        run: |
          cd ${{ inputs.working-directory }}
          npm run sec:code -- \
            -d \
            --json-file-output="${{runner.temp}}/report_scan-code.json" \
            --org="${{ secrets.snyk-organization }}" \
            --project-name="${{ inputs.snyk-project }}" \
            --target-name="${{ inputs.target }}" \
            --severity-threshold="${{ inputs.severity-threshold == 'critical' && 'high' || inputs.severity-threshold }}"
          ((ls ${{runner.temp}}/report_scan-code.json >> /dev/null 2>&1 && echo "hasReport=1") || echo "hasReport=0") >> "$GITHUB_OUTPUT"
      - id: upload-report
        name: Upload report on Github Action run
        if: ${{ steps.scan-code.outputs.hasReport == '1' }}
        uses: actions/upload-artifact@v4
        with:
          name: report-security
          path: ${{runner.temp}}/report_scan-code.json
  scan-dependencies:
    runs-on: ubuntu-latest
    name: Scan dependencies for vulnerabilities
    if: ${{ contains(fromJSON('["all", "dependencies"]'), inputs.scan-mode) }}
    steps:
      - id: checkout-code
        name: Initialize code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.github-token }}
      - id: setup-node
        name: Initialize NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: npm
          cache-dependency-path: "${{ inputs.working-directory }}/package-lock.json"
      - id: setup-dependencies
        name: Initialize dependencies
        run: |
          cd ${{ inputs.working-directory }}
          npm install
      - id: scan-dependencies
        name: Scan dependencies for vulnerabilities
        env:
          SNYK_TOKEN: ${{ secrets.snyk-token }}
        run: |
          cd ${{ inputs.working-directory }}
          npm run sec:dependencies -- \
            -d \
            --json-file-output="${{runner.temp}}/report_scan-dependencies.json" \
            --org="${{ secrets.snyk-organization }}" \
            --project-name="${{ inputs.snyk-project }}" \
            --target-name="${{ inputs.target }}" \
            --severity-threshold="${{ inputs.severity-threshold }}" \
            --fail-on="${{ inputs.fail-on }}"
          ((ls ${{runner.temp}}/report_scan-dependencies.json >> /dev/null 2>&1 && echo "hasReport=1") || echo "hasReport=0") >> "$GITHUB_OUTPUT"
      - id: upload-report
        name: Upload report on Github Action run
        if: ${{ steps.scan-dependencies.outputs.hasReport == '1' }}
        uses: actions/upload-artifact@v4
        with:
          name: report-security
          path: ${{runner.temp}}/report_scan-dependencies.json
      - id: summarize-report
        name: Summarize report on Github Action run
        if: ${{ steps.scan-dependencies.outputs.hasReport == '1' }}
        uses: actions/github-script@v7
        with:
          script: |
            const report = require("${{runner.temp}}/report_scan-dependencies.json")

            const result = {
                critical: {
                  displayName: 'critical',
                  output: 'error',
                  items: []
                },
                high: {
                  displayName: 'high',
                  output: 'error',
                  items: []
                },
                medium: {
                  displayName: 'medium',
                  output: 'warning',
                  items: []
                },
                low: {
                  displayName: 'low',
                  output: 'notice',
                  items: []
                }
              }

            for(const vulnerability of report.vulnerabilities) {
              result[vulnerability.severity].items.push(vulnerability)
            }

            let summary = `${report.dependencyCount} dependencies analyzed. ${report.summary}.`

            for(const severity in result) {
              if(result[severity].items.length > 0) {
                summary += ` ${result[severity].items.length} dependencies marked as "${result[severity].displayName}".`
              }
            }

            core.notice(summary)
      - id: synchronize-report-github
        name: Synchronize report on Github repository
        if: ${{ steps.scan-dependencies.outputs.hasReport == '1' }}
        uses: actions/github-script@v7
        with:
          script: |
            const report = require("${{runner.temp}}/report_scan-dependencies.json")

            const result = {
                vulnerabilities: {
                  critical: [],
                  high: [],
                  medium: [],
                  low: []
                },
                cweIds: {
                  critical: new Set(),
                  high: new Set(),
                  medium: new Set(),
                  low: new Set()
                }
              }

            for(const vulnerabilty of report.vulnerabilities) {
              result.vulnerabilities[vulnerability.severity].push({
                  package: {
                    name: vulnerability.packageName,
                    ecosystem: vulnerability.packageManager
                  }
                })

              for(const cweId of vulnerability.identifiers.CWE) {
                  result.cweIds[vulnerability.severity].add(cweId)
              }
            }

            for(const severity in result.vulnerabilities) {
              if(result.vulnerabilities[severity].length > 0) {
                github.rest.securityAdvisories.createPrivateVulnerabilityReport({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  summary: report.summary,
                  description: `Powered by Snyk.io for organization "${report.org}", project "${report.projectName}".`,
                  severity,
                  vulnerabilities: result.vulnerabilities[severity],
                  cwe_ids: result.cweIds[severity]
                })
              }
            }
